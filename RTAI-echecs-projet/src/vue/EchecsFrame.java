/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package vue;

import controleur.CaseControler;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import modele.*;

/**
 *
 * @author bgaudou
 */
public class EchecsFrame extends javax.swing.JFrame implements Observateur {

    // Les trois images pour decorer les cases du jeu
    private static final ImageIcon BLANC = new ImageIcon("./src/imgs/blanc.jpg");
    private static final ImageIcon CROIX = new ImageIcon("./src/imgs/croix.jpg");
    private static final ImageIcon ROND = new ImageIcon("./src/imgs/rond.jpg");

    private static final int taille = 3;
        
    // Les Cases et boutons
    JButton btnQuitter = new JButton("Q");
    JButton btnNouvelle = new JButton("N");
    JLabel nextPlayer = new JLabel(CROIX);
    
    JLabel[][] jboard;
    Jeu jeu;    
    
    /**
     * Creates new form MorpionFrame
     * @param _jeu
     */
    public EchecsFrame(Jeu _jeu) {
        initComponents();
        jboard = new JLabel[taille][taille];
        this.jeu=_jeu;
        for(int i=0;i<taille;i++){
            for(int j=0;j<taille;j++){
                // init case
                jboard[i][j] = new JLabel(BLANC);
                panelJeu.add(jboard[i][j]);
                
                jboard[i][j].addMouseListener(
                        new CaseControler(i,j,this.jeu));
            }
        }
        
        panelJeu.add(btnQuitter);
        panelJeu.add(nextPlayer);
        panelJeu.add(btnNouvelle);
        
        btnQuitter.addActionListener(
            new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    quitterEvt(evt);
                }
            });
        btnNouvelle.addActionListener(
            new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    nouvellePartieEvt(evt);
                }
            });
        
        this.pack();
    }

    public ImageIcon getIconFromInt(int i){
        ImageIcon img = new ImageIcon();
        
        if(i==0){
            img =new ImageIcon("./src/imgs/blanc.jpg");
        }
        if(i==1){
            img =new ImageIcon("./src/imgs/croix.jpg");
        }
        if(i==2){
            img =new ImageIcon("./src/imgs/rond.jpg");
        }
        return img;
    }
    
    void initBoardPanel(){
        for(int i=0;i<taille;i++){
            for(int j=0;j<taille;j++){
                // init case
                jboard[i][j].setIcon(BLANC);
            }
        }  
        nextPlayer.setIcon(CROIX);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelJeu = new javax.swing.JPanel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        panelJeu.setLayout(new java.awt.GridLayout(4, 3));

        jMenu1.setText("Jeu");

        jMenuItem1.setText("Nouvelle Partie");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nouvellePartieEvt(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem2.setText("Quitter");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quitterEvt(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(panelJeu, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 107, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(panelJeu, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void quitterEvt(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quitterEvt
        System.exit(1);
    }//GEN-LAST:event_quitterEvt

    private void nouvellePartieEvt(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nouvellePartieEvt
        this.jeu.nouvellePartie();
        initBoardPanel();
    }//GEN-LAST:event_nouvellePartieEvt

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EchecsFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EchecsFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EchecsFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EchecsFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                Jeu _mM=new Jeu();
                EchecsFrame _mF = new EchecsFrame(_mM);
                _mF.setVisible(true);
                _mM.register(_mF);
                MorpionVueTextuelle _mVT=new MorpionVueTextuelle();
                _mM.register(_mVT);
                _mM.nouvellePartie();
                MorpionVueFichier _mVF=new MorpionVueFichier();
                _mM.register(_mVF);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JPanel panelJeu;
    // End of variables declaration//GEN-END:variables

    public void update(int i, int j){
        //System.out.println(i + " " + j);
        if(jboard[i][j].getIcon() == BLANC ){
            //jeu.play(i,j);
            jboard[i][j].setIcon(nextPlayer.getIcon());
            nextPlayer.setIcon((nextPlayer.getIcon()==ROND)?CROIX:ROND);
        }
    } 
    
    public void avertir(int i, int j){
        update(i, j);       
    }
    
    public void avertirNewGame(){
        //jeu.nouvellePartie();
        initBoardPanel();
    }
    
    public void avertirFinPartie(boolean avecVainqueur){
        if(avecVainqueur) {
            JOptionPane.showMessageDialog(null, "Player " + ((nextPlayer.getIcon()==ROND)?"CROIX":"ROND") + " gagne !", "Resultats", JOptionPane.INFORMATION_MESSAGE);
        }
        else{
            JOptionPane.showMessageDialog(null, "Il n'y a pas de vainqueurs !", "Resultats", JOptionPane.INFORMATION_MESSAGE);
        }
    }
}
